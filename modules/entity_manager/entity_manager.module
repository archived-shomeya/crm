<?php
// $Id$

/**
 * @file
 *
 */

  
function entity_manager_menu() {
  $items = array();

  // Ensure the following is not executed until field_bundles is working and
  // tables are updated. Needed to avoid errors on initial installation.
  if (defined('MAINTENANCE_MODE')) {
    return $items;
  }

  // Create tabs for all possible bundles.
  foreach (entity_get_info() as $entity_type => $entity_info) {
    if (isset($entity_info['managed']) && $entity_info['managed'] == TRUE) {
      if (isset($entity_info['managed options']['bundles']['path'])) {
        $items[$entity_info['managed options']['bundles']['path']] = array(
          'title' => $entity_info['label'] .' types',
          'description' => 'Manage ' . $entity_info['label'] . ' types.',
          'page callback' => 'entity_manager_types_overview',
          'page arguments' => array($entity_type),
          'access arguments' => array('administer ' . $entity_info['label'] . ' types'),
          'type' => MENU_LOCAL_TASK,
          'weight' => 0,
          'file' => 'includes/entity_manager.types.inc',
        );
        $items[$entity_info['managed options']['bundles']['path'] . '/%entity_manager_type'] = array(
          'load arguments' => array($entity_type),
          'title callback' => 'entity_manager_type_title',
          'title arguments' => array($entity_info['managed options']['bundles']['bundle argument']),
          'page callback' => 'entity_manager_bundle_type_form_wrapper',
          'page arguments' => array($entity_info['managed options']['bundles']['bundle argument']),
          'access arguments' => array('administer ' . $entity_info['label'] . ' types'),
          'file' => 'includes/entity_manager.types.inc',
        );
        $items[$entity_info['managed options']['bundles']['path'] . '/add'] = array(
          'title' => 'Add ' . $entity_info['label'] . ' type',
          'page callback' => 'entity_manager_bundle_type_form_wrapper',
          'page arguments' => array(entity_manager_bundle_type_new($entity_type)),
          'access arguments' => array('administer ' . $entity_info['label'] . ' types'),
          'type' => MENU_LOCAL_ACTION,
          'file' => 'includes/entity_manager.types.inc',
        );
        $items[$entity_info['managed options']['bundles']['path'] . '/%entity_manager_type/edit'] = array(
          'title' => 'Edit',
          'type' => MENU_DEFAULT_LOCAL_TASK,
          'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
        );
        $items[$entity_info['managed options']['bundles']['path'] . '/%entity_manager_type/delete'] = array(
          'load arguments' => array($entity_type),
          'title' => 'Delete',
          'page callback' => 'entity_manager_bundle_type_delete_form_wrapper',
          'page arguments' => array($entity_info['managed options']['bundles']['bundle argument']),
          'access arguments' => array('administer ' . $entity_info['label'] . ' types'),
          'type' => MENU_LOCAL_TASK,
          'context' => MENU_CONTEXT_INLINE,
          'weight' => 10,
          'file' => 'includes/entity_manager.types.inc',
        );
      }
    }
  }

  return $items;
}

/**
 * Implements hook_entity_info_alter().
 */
function entity_manager_entity_info_alter(&$entities) {
  foreach ($entities as $entity_type => &$entity_info) {
    if (isset($entity_info['managed']) && $entity_info['managed'] == TRUE) {
      if (isset($entity_info['managed options']['bundles']['view'])) {
        foreach (entity_manager_type_get_name($entity_type) as $type => $name) {
          $entity_info['bundles'][$type] = array(
            'label' => $name,
            'admin' => array(
              'path' => $entity_info['managed options']['bundles']['path'] . '/%entity_manager_type',
              'real path' => $entity_info['managed options']['bundles']['path'] . strtr($type, array('_' => '-')),
              'bundle argument' => $entity_info['managed options']['bundles']['bundle argument'],
              'access arguments' => array('administer ' . $entity_info['label'] . ' types'),
            ),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_menu_alter().
 */
function entity_manager_menu_alter(&$items) {
  foreach (entity_get_info() as $entity_type => $entity_info) {
    if (isset($entity_info['managed']) && $entity_info['managed'] == TRUE) {
      if (isset($entity_info['managed options']['bundles']['path'])) {
        // Transform the field UI tabs into contextual links.
        $items[$entity_info['managed options']['bundles']['path'] . '/%entity_manager_type/fields']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
        $items[$entity_info['managed options']['bundles']['path'] . '/%entity_manager_type/display']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
      }
    }
  }
}

/**
 * Returns an array of bundle type objects keyed by type.
 */
function entity_manager_types($entity_type) {
  // First check the static cache
  $types = &drupal_static(__FUNCTION__);

  if (!isset($types)) {
    $types = array();
  }

  // If it did not exist, fetch the types now.
  if (!isset($types[$entity_type])) {
    $types[$entity_type] = array();

    // Find bundle types defined by hook_{$entity_type}_info().
    foreach (module_implements("{$entity_type}_info") as $module) {
      foreach (module_invoke($module, "{$entity_type}_info") as $type_name => $type) {
        // Set the module each bundle type is defined by.
        $type->module = $module;
        $types[$entity_type][$type_name] = $type;
      }
    }

    // Load types from database
    $loaded_types = db_select('entity_manager_bundle_types', 'embt')
      ->fields('embt', array('entity_type', 'type', 'name', 'help', 'description'))
      ->condition('entity_type', $entity_type)
      ->execute()
      ->fetchAllAssoc('type');

    foreach ($loaded_types as $type_name => $type) {
      // Set the module each bundle type is defined by.
      $type->module = 'entity_manager';
      $types[$entity_type][$type_name] = $type;
    }

    // Last allow the info to be altered by other modules.
    drupal_alter("{$entity_type}_info", $types[$entity_type]);
  }

  return $types[$entity_type];
}

/**
 * Loads a bundle type.
 *
 * @param $type
 *   The machine-readable name of the bundle type; accepts normal machine names
 *     and URL prepared machine names with underscores replaced by hyphens.
 */
function entity_manager_type_load($type, $entity_type) {
  $type = strtr($type, array('-' => '_'));
  $bundle_types = entity_manager_types($entity_type);
  return !empty($bundle_types[$type]) ? $bundle_types[$type] : FALSE;
}

/**
 * Returns the human readable name of any or all bundle types.
 *
 * @param $entity_type
 *   The entity type to filter bundles on.
 *
 * @param $bundle_type
 *   Optional parameter specifying the type whose name to return.
 *
 * @return
 *   Either an array of all bundle type names keyed by the machine name or a
 *     string containing the human readable name for the specified type. If a
 *     type is specified that does not exist, this function returns FALSE.
 */
function entity_manager_type_get_name($entity_type, $bundle_type = NULL) {
  $bundle_types = entity_manager_types($entity_type);

  // Return a type name if specified and it exists.
  if (!empty($bundle_type)) {
    if (isset($bundle_types[$bundle_type])) {
      return $bundle_types[$bundle_type]->name;
    }
    else {
      // Return FALSE if it does not exist.
      return FALSE;
    }
  }

  // Otherwise turn the array values into the type name only.
  foreach ($bundle_types as $key => $value) {
    $bundle_types[$key] = $value->name;
  }

  return $bundle_types;
}

/**
 * Implements hook_theme().
 */
function entity_manager_theme() {
  return array(
    'entity_manager_type_admin_overview' => array(
      'variables' => array('bundle_type' => NULL),
      'file' => 'includes/entity_manager.types.inc',
    ),
  );
}

/**
 * Title callback: return the human-readable bundle type name.
 */
function entity_manager_type_title($bundle_type) {
  return $bundle_type->name;
}

/**
 * Checks to see if a given bundle type already exists.
 *
 * @param $type
 *   The string to match against existing types.
 *
 * @return
 *   TRUE or FALSE indicating whether or not the bundle type exists.
 */
function entity_manager_validate_bundle_type_unique($type, $entity_type) {
  // Look for a match of the type.
  if ($match_id = db_query('SELECT type FROM {entity_manager_bundle_types} WHERE type = :type AND entity_type = :entity_type', array(':type' => $type, ':entity_type' => $entity_type))->fetchField()) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Returns an initialized bundle type object.
 */
function entity_manager_bundle_type_new($entity_type) {
  return (object) array(
    'entity_type' => $entity_type,
    'type' => '',
    'name' => '',
    'description' => '',
    'help' => '',
  );
}

/**
 * Saves a bundle type.
 *
 * This function will either insert a new bundle type if $bundle_type->is_new
 * is set or attempt to update an existing bundle type if it is not. It does
 * not currently support changing the machine-readable name of the bundle type,
 * nor is this possible through the form supplied by the entity_manager module.
 *
 * @param $bundle_type
 *   The bundle type object containing the basic properties as initialized in
 *     entity_manager_bundle_type_new().
 *
 * @return
 *   The return value of the call to drupal_write_record() to save the bundle
 *     type, either FALSE on failure or SAVED_NEW or SAVED_UPDATED indicating
 *     the type of query performed to save the bundle type.
 */
function entity_manager_bundle_type_save($bundle_type) {
  $op = drupal_write_record('entity_manager_bundle_types', $bundle_type, empty($bundle_type->is_new) ? 'type' : array());
  entity_manager_types_reset();
  menu_rebuild();

  // If this is a new bundle type and the insert did not fail...
  if (!empty($bundle_type->is_new) && $op !== FALSE) {
    // Notify the field API that a new bundle has been created.
    field_attach_create_bundle($bundle_type->entity_type, $bundle_type->type);

    // Notify other modules that a new bundle type has been created.
    module_invoke_all($bundle_type->entity_type . '_type_insert', $bundle_type);
  }
  else {
    // Notify other modules that an existing bundle type has been updated.
    module_invoke_all($bundle_type->entity_type . '_type_update', $bundle_type);
  }

  return $op;
}

/**
 * Deletes a bundle type.
 *
 * @param $type
 *   The machine-readable name of the bundle type.
 *
 * @param $entity_type
 *   The machine-readable name of the entity type.
 */
function entity_manager_bundle_type_delete($type, $entity_type) {
  $bundle_type = entity_manager_type_load($type, $entity_type);

  db_delete('entity_manager_bundle_types')
    ->condition('type', $type)
    ->condition('entity_type', $entity_type)
    ->execute();

  // Rebuild the menu to get rid of this type's bundle add menu item.
  entity_manager_types_reset();
  menu_rebuild();

  // Notify the field API that this bundle has been destroyed.
  field_attach_delete_bundle($bundle_type->entity_type, $type);

  // Notify other modules that this bundle type has been deleted.
  module_invoke_all($bundle_type->entity_type . '_type_delete', $bundle_type);
}

/**
 * Resets the cached list of bundle types.
 */
function entity_manager_types_reset() {
  $bundle_types = &drupal_static('entity_manager_types');
  $bundle_types = NULL;
}

/**
 * This function is a dummy callback to use with machine_name form elements.
 *
 * It always returns true, since our actual loader requires 2 arguments, and
 * form.inc does not allow this. Therefore we must always verify the machine
 * name ourselves in a separate validate function that has access to the
 * entity_type as well as the bundle_type.
 *
 * @see entity_manager_bundle_type_form_validate
 */
function entity_manager_machine_name_verify($type_name) {
  return FALSE;
}
